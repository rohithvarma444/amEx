generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  LISTING
  REQUEST
}

enum DealStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
}

enum ExchangeStatus {
  PENDING
  COMPLETED
}

model User {
  id         String     @id                      // Clerk user ID
  firstName  String
  lastName   String
  email      String     @unique
  upiId      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  posts      Post[]     @relation("UserPosts")
  interests  Interest[]
  deals      Deal[]     @relation("UserDeals")
  exchanges  Exchange[] @relation("ExchangeBuyer")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?  // URL to category image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

enum STATUS {
  ACTIVE
  DELETED
  FULLFILLED
}

model Post {
  id           String     @id @default(uuid())
  type         PostType
  title        String
  caption      String
  description  String
  imageUrl     String[]
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String
  price        Float
  priceUnit    String     // e.g. /kg, /item, /l
  location     String?
  urgency      Urgency?
  createdAt    DateTime   @default(now())
  status       STATUS     @default(ACTIVE)

  user         User       @relation("UserPosts", fields: [userId], references: [id])
  userId       String

  interests    Interest[]
  deal         Deal?

  @@index([userId])
  @@index([categoryId])
}

model Interest {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  description String

  @@unique([userId, postId]) // Prevent duplicate interests
}

model Deal {
  id             String     @id @default(uuid())
  post           Post       @relation(fields: [postId], references: [id])
  postId         String     @unique
  selectedUser   User       @relation("UserDeals", fields: [selectedUserId], references: [id])
  selectedUserId String
  status         DealStatus @default(PENDING)
  exchange       Exchange?
  otp            OTP?

  createdAt      DateTime   @default(now())
  completedAt    DateTime?

  @@index([selectedUserId])
  @@index([postId])
}

model Exchange {
  id        String         @id @default(uuid())
  buyer     User           @relation("ExchangeBuyer", fields: [buyerId], references: [id])
  buyerId   String
  upiId     String
  amount    Float
  status    ExchangeStatus @default(PENDING)
  qrCodeUrl String?
  createdAt DateTime       @default(now())

  deal      Deal?          @relation(fields: [dealId], references: [id])
  dealId    String?        @unique

  @@index([buyerId])
}

model OTP {
  id         String   @id @default(uuid())
  code       String
  deal       Deal     @relation(fields: [dealId], references: [id])
  dealId     String   @unique  // One OTP per deal
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([code])
  @@index([expiresAt])
}