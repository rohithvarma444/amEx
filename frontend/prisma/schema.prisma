generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String     @id
  email                         String     @unique
  firstName                     String
  lastName                      String
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt
  upiId                         String?
  Chat_Chat_ownerIdToUser       Chat[]     @relation("Chat_ownerIdToUser")
  Chat_Chat_participantIdToUser Chat[]     @relation("Chat_participantIdToUser")
  deals                         Deal[]     @relation("UserDeals")
  exchanges                     Exchange[] @relation("ExchangeBuyer")
  interests                     Interest[]
  Message                       Message[]
  posts                         Post[]     @relation("UserPosts")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id          String     @id @default(uuid())
  type        PostType
  title       String
  caption     String?
  description String?
  price       Float
  priceUnit   String
  location    String?
  urgency     Urgency?
  createdAt   DateTime   @default(now())
  userId      String
  imageUrl    String[]
  categoryId  String
  status      STATUS     @default(ACTIVE)
  Chat        Chat[]
  deal        Deal?
  interests   Interest[]
  category    Category   @relation(fields: [categoryId], references: [id])
  user        User       @relation("UserPosts", fields: [userId], references: [id])

  @@index([userId])
  @@index([categoryId])
}

model Interest {
  id          String   @id @default(uuid())
  userId      String
  postId      String
  createdAt   DateTime @default(now())
  description String
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Deal {
  id             String     @id @default(uuid())
  postId         String     @unique
  selectedUserId String
  status         DealStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  completedAt    DateTime?
  post           Post       @relation(fields: [postId], references: [id])
  selectedUser   User       @relation("UserDeals", fields: [selectedUserId], references: [id])
  exchange       Exchange?
  otp            OTP?

  @@index([selectedUserId])
  @@index([postId])
}

model Exchange {
  id        String         @id @default(uuid())
  buyerId   String
  upiId     String
  amount    Float
  status    ExchangeStatus @default(PENDING)
  qrCodeUrl String?
  createdAt DateTime       @default(now())
  dealId    String?        @unique
  buyer     User           @relation("ExchangeBuyer", fields: [buyerId], references: [id])
  deal      Deal?          @relation(fields: [dealId], references: [id])

  @@index([buyerId])
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  dealId    String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  deal      Deal     @relation(fields: [dealId], references: [id])

  @@index([code])
  @@index([expiresAt])
}

model Chat {
  id                            String    @id
  postId                        String
  ownerId                       String
  participantId                 String
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime
  User_Chat_ownerIdToUser       User      @relation("Chat_ownerIdToUser", fields: [ownerId], references: [id])
  User_Chat_participantIdToUser User      @relation("Chat_participantIdToUser", fields: [participantId], references: [id])
  Post                          Post      @relation(fields: [postId], references: [id])
  Message                       Message[]

  @@unique([postId, participantId])
}

model Message {
  id        String   @id
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  Chat      Chat     @relation(fields: [chatId], references: [id])
  User      User     @relation(fields: [senderId], references: [id])

  @@index([chatId])
}

enum PostType {
  LISTING
  REQUEST
}

enum DealStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
}

enum ExchangeStatus {
  PENDING
  COMPLETED
}

enum STATUS {
  ACTIVE
  DELETED
  FULLFILLED
}
