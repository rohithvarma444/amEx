generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id
  email             String     @unique
  firstName         String
  lastName          String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  upiId             String?
  deals             Deal[]     @relation("UserDeals")
  // exchanges Exchange[] @relation("ExchangeBuyer")
  interests         Interest[]
  posts             Post[]     @relation("UserPosts")
  messagesSent      Message[]  @relation("UserMessages")
  chatsOwned        Chat[]     @relation("ChatOwner")
  chatsParticipated Chat[]     @relation("ChatParticipant")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id          String     @id @default(uuid())
  type        PostType
  title       String
  caption     String
  description String
  price       Float
  priceUnit   String
  location    String?
  urgency     Urgency?
  createdAt   DateTime   @default(now())
  userId      String
  imageUrl    String[]
  categoryId  String
  status      STATUS     @default(ACTIVE)
  deal        Deal?
  interests   Interest[]
  category    Category   @relation(fields: [categoryId], references: [id])
  user        User       @relation("UserPosts", fields: [userId], references: [id])
  chats       Chat[]

  @@index([userId])
  @@index([categoryId])
}

model Interest {
  id          String   @id @default(uuid())
  userId      String
  postId      String
  createdAt   DateTime @default(now())
  description String
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Deal {
  id             String     @id @default(uuid())
  postId         String
  selectedUserId String
  status         DealStatus @default(PENDING) // ACTIVE, DECLINED, COMPLETED
  createdAt      DateTime   @default(now())
  completedAt    DateTime?

  // OTP Details
  otpCode      String?
  otpExpiresAt DateTime?
  otpUsed      Boolean   @default(false)

  // Payment Details
  buyerUpiId    String?
  amountPaid    Float?
  paymentStatus PaymentStatus @default(PENDING)
  qrCodeUrl     String?

  // Relations
  post         Post @relation(fields: [postId], references: [id])
  selectedUser User @relation("UserDeals", fields: [selectedUserId], references: [id])

  // For business logic, enforce only one ACTIVE manually via query-level logic

  @@unique([postId], name: "OnlyOneDealPerPost") // allows only one deal per post if not filtered
  @@index([selectedUserId])
  @@index([postId])
  @@index([otpCode])
}

// model Exchange {
//   id        String         @id @default(uuid())
//   buyerId   String
//   upiId     String
//   amount    Float
//   status    ExchangeStatus @default(PENDING)
//   qrCodeUrl String?
//   createdAt DateTime       @default(now())
//   dealId    String?        @unique
//   buyer     User           @relation("ExchangeBuyer", fields: [buyerId], references: [id])
//   deal      Deal?          @relation(fields: [dealId], references: [id])

//   @@index([buyerId])
// }

// model OTP {
//   id        String   @id @default(uuid())
//   code      String
//   dealId    String   @unique
//   expiresAt DateTime
//   used      Boolean  @default(false)
//   createdAt DateTime @default(now())
//   deal      Deal     @relation(fields: [dealId], references: [id])

//   @@index([code])
//   @@index([expiresAt])
// }

model Chat {
  id            String    @id @default(uuid())
  postId        String
  ownerId       String
  participantId String // interested user (not the owner)
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  post        Post @relation(fields: [postId], references: [id])
  owner       User @relation("ChatOwner", fields: [ownerId], references: [id])
  participant User @relation("ChatParticipant", fields: [participantId], references: [id])

  @@unique([postId, participantId]) // ensures one chat per user-post combo
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation("UserMessages", fields: [senderId], references: [id])

  @@index([chatId])
}

enum PostType {
  LISTING
  REQUEST
}

enum DealStatus {
  PENDING
  ACTIVE
  DECLINED
  COMPLETED
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
}

enum ExchangeStatus {
  PENDING
  COMPLETED
}

enum STATUS {
  ACTIVE
  DELETED
  FULLFILLED
}

enum PaymentStatus {
  PENDING
  RECEIVED
}
